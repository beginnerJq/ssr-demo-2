(function() { return { model: {ready(e){const{modelInfos:n}=JSON.parse(e.config);e.outputs.forEach(((e,o,s)=>{s[o].data={type:"model",data:n}}))}, parse({node:e}){e.outputs.forEach((n=>{this.parseFlowNode(e,n)}))}, unregister({node:e}){console.log("unregister",e)}, },material: {ready(e){const n=JSON.parse(e.config),{materialId:o}=n;e.outputs.forEach(((e,n,s)=>{s[n].data={type:"material",data:o}}))}, parse({node:e}){e.outputs.forEach((n=>{this.parseFlowNode(e,n)}))}, unregister({node:e}){console.log("unregister",e)}, },flow: {ready(e){const n=JSON.parse(e.config);e.outputs.forEach(((e,o,s)=>{s[o].data=n}))}, parse({node:e}){this.parseFlowNode(e,e.outputs[0])}, unregister({node:e}){console.log("unregister",e)}, },staticData: {ready(e){const n=JSON.parse(e.config),o=JSON.parse(n.codeString);e.outputs.forEach(((e,n,s)=>{s[n].data=o}))}, parse({node:e}){e.outputs.forEach((n=>{this.parseFlowNode(e,n)}))}, unregister({node:e}){console.log("unregister",e)}, },interfaceData: {ready(){}, parse({node:e}){const n=JSON.parse(e.config),{address:o,bodies:s,bodyType:c,headers:l,params:u,type:d}=n.requestInfo;let f,g,v;if(u.length>0&&(f=formKeyValuesObj(u)),s.length>0)if("multipart/form-data"===c){const e=new FormData;s.map((n=>{e.set(n.key,n.value)})),g=e}else g="application/x-www-form-urlencoded"===c?new URLSearchParams(s.map((e=>[e.key,e.value]))):formKeyValuesObj(s);l.length>0&&(v=formKeyValuesObj(l)),Bn({method:d,url:o,params:f,data:g,headers:v}).then((n=>{const{data:{data:o}}=n;e.outputs[0].data=o,this.parseFlowNode(e,e.outputs[0])}))}, unregister({node:e}){console.log("unregister",e)}, },condition: {parse({node:e,inputData:n}){n&&e.outputs.some((o=>{const{config:s}=o,{codeString:c}=JSON.parse(s),l=new Function("sourceData",c)(n);if(l)return o.data=l,this.parseFlowNode(e,o),!0}))}, unregister({node:e}){console.log("unregister",e)}, },filter: {ready(e){const n=JSON.parse(e.config),{filterCode:o}=n;e.outputs.forEach(((e,n,s)=>{s[n].data=o}))}, parse({node:e,inputData:n}){const{filterCode:o}=JSON.parse(e.config),s=new Function("sourceData",o)(n),c=e.outputs[0];c.data=s,this.parseFlowNode(e,c)}, unregister({node:e}){console.log("unregister",e)}, },interaction: {parse({node:e,inputData:n}){var o;const s=this.getOutInstance("ssp");if(!s)return;const{type:c,data:l}=n,{eventKey:u}=JSON.parse(e.config),setSceneObjectEvent=(n,o)=>{if(!n)return;let s=null;switch(o){case"click":s=n.onClick,n.onClick=()=>{null==s||s(),this.dispatchSignal(`${e.id}_${n.sid}_${o}`)};break;case"dblClick":s=n.onDblClick,n.onDblClick=()=>{null==s||s(),this.dispatchSignal(`${e.id}_${n.sid}_${o}`)};break;case"rightClick":s=n.onRightClick,n.onRightClick=()=>{null==s||s(),this.dispatchSignal(`${e.id}_${n.sid}_${o}`)}}};switch(c){case"model":l.forEach((({sid:e})=>{setSceneObjectEvent(s.getObjectById(e),u)}));break;case"material":null==(o=s.getObjectByUserDataProperty("familyId",l))||o.forEach((e=>setSceneObjectEvent(e,u)))}e.outputs.forEach((o=>{o.data={...n,fromInteraction:!0,eventKey:u,nodeId:e.id},this.parseFlowNode(e,o)}))}, unregister({node:e}){console.log("unregister",e)}, },action: {parse({node:e,inputData:n}){const o=this.getOutInstance("ssp");if(!o)return;const{type:s,data:c,fromInteraction:l,eventKey:u,nodeId:d}=n,{behaviorType:f,actionCode:g,customCode:v,behaviorVars:y}=JSON.parse(e.config);let b=[];if("model"===s?b=c.map((({sid:e})=>o.getObjectById(e))):"material"===s&&(b=o.getObjectByUserDataProperty("familyId",c)),l)if("SYS"===f||"CUS"===f){const e=getBehaviorVars(y);b.forEach((n=>{this.addSignal(`${d}_${n.sid}_${u}`,(()=>{new Function("{ssp, vars, _this}",g)({ssp:o,vars:e,_this:n})}))}))}else"CUSTOM"===f&&b.forEach((e=>{this.addSignal(`${d}_${e.sid}_${u}`,(()=>{new Function("{ ssp, object, inputData }",v)({ssp:o,object:e,inputData:n})}))}));else if("SYS"===f||"CUS"===f){const e=getBehaviorVars(y);b.forEach((n=>{new Function("{ssp, vars, _this}",g)({ssp:o,vars:e,_this:n})}))}else"CUSTOM"===f&&b.forEach((e=>{new Function("{ ssp, object, inputData }",v)({ssp:o,object:e,inputData:n})}));e.outputs.forEach((n=>{this.parseFlowNode(e,n)}))}, unregister({node:e}){console.log("unregister",e)}, },viewpoint: {parse({node:e,inputData:n}){const o=this.getOutInstance("ssp");if(!o)return;const{viewpointData:s}=JSON.parse(e.config),c=JSON.parse(s);o.flyTo(c.position,c.rotation),e.outputs.forEach((o=>{o.data=n,this.parseFlowNode(e,o)}))}, unregister({node:e}){console.log("unregister",e)}, },} } )()